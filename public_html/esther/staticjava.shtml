<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>Compiler Construction</title>


  <link rel="stylesheet" type="text/css" href="../css/style.css">

  <meta name="Microsoft Border" content="tlb">

</head>


<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

          <tr>

            <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
            <p align="center"><b><font face="Arial" size="5">CSCE 425/825 - Compiler
Construction</font></b></p>

            </td>

          </tr>

        </tbody>
      </table>

      <p><span style="position: absolute; top: 50px; left: 11px;"> <br>

      </span> </p>

      </td>

    </tr>

<!--msnavigation-->
  </tbody>
</table>

<table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

<!--#include file="sidebar.shtml" --> <td valign="top" width="24"></td>

      <td valign="top">
      <p><b><font face="Arial" size="5">&nbsp;StaticJava
Project</font></b></p>

      <p>
In this
project you will work on a compiler for a subset of the Java
programming language that is static in<br>

terms of its data types and
method invocation. Details on the deliverables and
milestones for the project<br>

are available <a href="delivAndMile.shtml">here</a></p>

      <p>Specifically, <a href="staticjava.shtml">StaticJava</a>
has the following
features (or limitations):</p>

      <ul>

        <small> </small><li><small>Only
two
variable types: boolean and int</small></li>

        <small> </small><li><small>No
objects
(thus, no exception handling), arrays, or
threads</small></li>

        <small> </small><li><small>Only
static
fields and methods</small></li>

        <small> </small><li><small>Method
return type can be the above type and void</small></li>

        <small> </small><li><small>No
method
overloading</small></li>

        <small> </small><li><small>Can
call
Java library static methods (e.g.,
Integer.parseInt())</small></li>

        <small> </small><li><small>Consists
of
one class that has a Java main method
(String array is allowed here)</small></li>

        <small> </small><li><small>No
increment and decrement expressions in addition to other missing
operators</small></li>

        <li><small>Limited loop constructs<br>

          </small></li>

        <small> </small><li><small>No
package
declaration (i.e., the declared class
lives in the default package)</small></li>

        <small> </small><li><small>All
code
must be in one file, <i>etc.</i></small></li>

      </ul>

      <ul>

        <small> </small>
      </ul>

      <p>&nbsp; Your job is to implement a compiler for an <a href="extendedstaticjava.shtml">extended</a> version
of this language based on the implementation given below. </p>

      <table id="AutoNumber4" style="border-collapse: collapse;" border="0" bordercolor="#111111" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

        </tbody>
      </table>

      <table style="text-align: left; width: 100%;" cellpadding="2" cellspacing="2">

        <tbody>

          <tr>

            <td style="background-color: rgb(255, 255, 183);"><big style="font-weight: bold; font-family: Helvetica,Arial,sans-serif;">Syntax</big></td>

          </tr>

        </tbody>
      </table>

      <p style="margin-left: 40px;"><small>&lt;<i>program</i>&gt;
::= &lt;<i>class-declaration</i>&gt;</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>class-declaration</i>&gt;
::= "<b>public</b>" "<b>class</b>" <i>ID</i>
"<b>{</b>" &lt;<i>main-method-declaration</i>&gt;
&lt;<i>field-or-method-declaration</i>&gt;* "<b>}</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>main-method-declaration</i>&gt;
::= "<b>public</b>" "<b>static</b>" "<b>void</b>"
"<b>main</b>" "(" "<b>String</b>" "<b>[</b>"
"<b>]</b>" <i>ID</i> ")" "<b>{</b>"
&lt;<i>method-body</i>&gt; "<b>}</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>field-or-method-declaration</i>&gt;
::= &lt;<i>field-declaration</i>&gt; | &lt;<i>method-declaration</i>&gt;</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>field-declaration</i>&gt;
::= "<b>static</b>" &lt;<i>type</i>&gt;
      <i>ID</i> "<b>;</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>method-declaration</i>&gt;
::= "<b>static</b>" &lt;<i>return-type</i>&gt;
      <i>ID</i> "(" &lt;<i>params</i>&gt;?
")" "<b>{</b>" &lt;<i>method-body</i>&gt;
"<b>}</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>type</i>&gt;
::= "<b>boolean</b>" | "<b>int</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>return-type</i>&gt;
::= &lt;<i>type</i>&gt; | "<b>void</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>params</i>&gt;
::= &lt;<i>param</i>&gt; ( "<b>,</b>"
&lt;<i>param</i>&gt; )*</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>param</i>&gt;
::= &lt;<i>type</i>&gt; <i>ID</i></small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>method-body</i>&gt;
::= &lt;<i>local-declaration</i>&gt;* &lt;<i>statement</i>&gt;*</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>local-declaration</i>&gt;
::= &lt;<i>type</i>&gt; <i>ID</i> "<b>;</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>statement</i>&gt;
::= &lt;<i>assign-statement</i>&gt; | &lt;<i>if-statement</i>&gt;
| &lt;<i>while-statement</i>&gt; | &lt;<i>invoke-exp-statement</i>&gt;
| &lt;<i>return-statement</i>&gt;</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>assign-statement</i>&gt;
::= <i>ID</i> "<b>=</b>" &lt;<i>exp</i>&gt;
"<b>;</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>if-statement</i>&gt;
::= "<b>if</b>" "<b>(</b>" &lt;<i>exp</i>&gt;
"<b>)</b>" "<b>{</b>" &lt;<i>statement</i>&gt;*
"<b>}</b>" ( "<b>else</b>" "<b>{</b>"
&lt;<i>statement</i>&gt;* "<b>}</b>" )?</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>while-statement</i>&gt;
::= "<b>while</b>" "<b>(</b>" &lt;<i>exp</i>&gt;
"<b>)</b>" "<b>{</b>" &lt;<i>statement</i>&gt;*
"<b>}</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>invoke-exp-statement</i>&gt;
::= &lt;<i>invoke-exp</i>&gt; "<b>;</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>return-statement</i>&gt;
::= "<b>return</b>" &lt;<i>exp</i>&gt; "<b>;</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>exp</i>&gt;
::= &lt;<i>literal-exp</i>&gt; | &lt;<i>unary-exp</i>&gt;
| &lt;<i>binary-exp</i>&gt; | &lt;<i>paren-exp</i>&gt;
| &lt;<i>invoke-exp</i>&gt; | &lt;<i>var-ref</i>&gt;</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>literal-exp</i>&gt;
::= &lt;<i>boolean-literal</i>&gt; | <i>NUM</i></small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>boolean-literal</i>&gt;
::= "<b>true</b>" | "<b>false</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>unary-exp</i>&gt;
::= &lt;<i>unary-op</i>&gt; &lt;<i>exp</i>&gt;</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>unary-op</i>&gt;
::= "<b>+</b>" | "<b>-</b>" | "<b>!</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>binary-exp</i>&gt;
::= &lt;<i>exp</i>&gt; &lt;<i>binary-op</i>&gt;
&lt;<i>exp</i>&gt;</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>binary-op</i>&gt;
::= "<b>+</b>" | "<b>-</b>" | "<b>*</b>"
| "<b>/</b>" | "<b>%</b>" | "<b>&gt;</b>"
| "<b>&gt;=</b>" | "==" | "<b>&lt;</b>"
| "<b>&lt;=</b>" | "<b>!=</b>" | "<b>&amp;&amp;</b>"
| "<b>||</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>paren-exp</i>&gt;
::= "<b>(</b>" &lt;<i>exp</i>&gt; "<b>)</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>invoke-exp</i>&gt;
::= ( <i>ID</i> "<b>.</b>" )? <i>ID</i>
"<b>(</b>" &lt;<i>args</i>&gt;? "<b>)</b>"</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>args</i>&gt;
::= &lt;<i>exp</i>&gt; ( "<b>,</b>"
&lt;<i>exp</i>&gt; )*</small></p>

      <p style="margin-left: 40px;"><small>&lt;<i>var-ref</i>&gt;
::= <i>ID</i></small></p>

      <p style="margin-left: 40px;"><small> <i>ID</i>
= ( 'a'..'z' | 'A'..'Z' | '_' | '$' ) ( 'a'..'z' | 'A'..'Z' | '_' |
'0'..'9' | '$' )*</small></p>

      <p style="margin-left: 40px;"><small> <i>NUM</i>
= '0' | ('1'..'9') ('0'..'9')*</small></p>

      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">

        <tbody>

          <tr>

            <td style="background-color: rgb(255, 255, 183);"><big><b><font face="Arial" size="2"><big>Examples</big></font></b></big></td>

          </tr>

        </tbody>
      </table>

      <pre style="margin-left: 40px;">public class Factorial<br>{<br> public static void main(String[] args)<br> {<br> StaticJavaLib.println(factorial(StaticJavaLib.getIntArgument(args, 0)));<br> }<br> <br> static int factorial(int n)<br> {<br> int result;<br> int i;<br> <br> StaticJavaLib.assertTrue(n &gt;= 1);<br> result = 1;<br> i = 2;<br> while (i &lt;= n)<br> {<br> result = result * i;<br> i = i + 1;<br> }<br> <br> return result;<br> }<br>}<br></pre>

      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">

        <tbody>

          <tr>

            <td style="background-color: rgb(255, 255, 183);"><big><b><font face="Arial" size="2"><big>Eclipse JDT, ASM,
and JVM Bytecode Representations</big></font></b></big></td>

          </tr>

        </tbody>
      </table>

      <table style="width: 809px; height: 711px;" class="wiki-table" border="1" cellpadding="0" cellspacing="0">

        <tbody>

          <tr>

            <th style="background-color: rgb(255, 255, 183);"><a href="http://www.cis.ksu.edu/%7Erobby/courses/cis706f05/StaticJava.html">StaticJava</a>
            </th>

            <th style="background-color: rgb(255, 255, 183);">Eclipse
JDT (org.eclipse.jdt.core.dom.*) </th>

            <th style="background-color: rgb(255, 255, 183);">ASM
(org.objectweb.asm.tree.*) </th>

            <th style="background-color: rgb(255, 255, 183);">JVM
Bytecode</th>

          </tr>

          <tr>

            <td>&lt;<i>program</i>&gt; </td>

            <td> CompilationUnit </td>

            <td> N/A </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>class-declaration</i>&gt;
            </td>

            <td> TypeDeclaration </td>

            <td> ClassNode </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>main-method-declaration</i>&gt;
            </td>

            <td> MethodDeclaration </td>

            <td> MethodNode </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>field-declaration</i>&gt;
            </td>

            <td> FieldDeclaration </td>

            <td> FieldNode </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>method-declaration</i>&gt;
            </td>

            <td> MethodDeclaration </td>

            <td> MethodNode </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>type</i>&gt; </td>

            <td> Type (PrimitiveType) </td>

            <td> N/A </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>return-type</i>&gt; </td>

            <td> PrimitiveType </td>

            <td> N/A </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>param</i>&gt; </td>

            <td> SingleVariableDeclaration </td>

            <td> N/A </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>method-body</i>&gt; </td>

            <td> Block </td>

            <td> N/A </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>local-declaration</i>&gt;
            </td>

            <td> VariableDeclarationStatement </td>

            <td> LocalVariableNode </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>assign-statement</i>&gt;
            </td>

            <td> ExpressionStatement (Assignment) </td>

            <td> VarInsnNode </td>

            <td> ISTORE, PUTSTATIC</td>

          </tr>

          <tr>

            <td>&lt;<i>if-statement</i>&gt; </td>

            <td> IfStatement </td>

            <td> JumpInsnNode </td>

            <td> IF_xxx, GOTO</td>

          </tr>

          <tr>

            <td>&lt;<i>while-statement</i>&gt;
            </td>

            <td> WhileStatement </td>

            <td> JumpInsnNode </td>

            <td> IF_xxx, GOTO</td>

          </tr>

          <tr>

            <td>&lt;<i>invoke-exp-statement</i>&gt;
            </td>

            <td> ExpressionStatement (MethodInvocation) </td>

            <td> MethodInsnNode </td>

            <td> INVOKESTATIC</td>

          </tr>

          <tr>

            <td>&lt;<i>return-statement</i>&gt;
            </td>

            <td> ReturnStatement </td>

            <td> InsnNode </td>

            <td> RETURN, IRETURN</td>

          </tr>

          <tr>

            <td>&lt;<i>literal-exp</i>&gt; </td>

            <td> BooleanLiteral, NumberLiteral </td>

            <td> InsnNode </td>

            <td> ICONST_M1, ICONST_0, ICONST_1, ICONST_2,
ICONST_3, ICONST_4, ICONST_5, BIPUSH, SIPUSH, LDC</td>

          </tr>

          <tr>

            <td>&lt;<i>unary-exp</i>&gt; </td>

            <td> PrefixExpression </td>

            <td> IntInsnNode, JumpInsnNode </td>

            <td> INEG, IF_EQ</td>

          </tr>

          <tr>

            <td>&lt;<i>binary-exp</i>&gt; </td>

            <td> BinaryExpression </td>

            <td> InsnNode, JumpInsnNode </td>

            <td> IADD, ISUB, IMUL, IDIV, IREM, INEG, IF_xxx, GOTO</td>

          </tr>

          <tr>

            <td>&lt;<i>paren-exp</i>&gt; </td>

            <td> ParenthesizedExpression </td>

            <td> N/A </td>

            <td> N/A</td>

          </tr>

          <tr>

            <td>&lt;<i>invoke-exp</i>&gt; </td>

            <td> MethodInvocation </td>

            <td> MethodInsnNode </td>

            <td> INVOKESTATIC</td>

          </tr>

          <tr>

            <td>&lt;<i>var-ref</i>&gt; </td>

            <td> SimpleName </td>

            <td> VarInsnNode, FieldInsnNode </td>

            <td> ILOAD, GETSTATIC</td>

          </tr>

        </tbody>
      </table>

      <p><small> <b>Miscellaneous</b>: POP,
POP2, DUP, DUP_X1, DUP_X2, DUP2, DUP2_X1, DUP2_X2, SWAP</small></p>

      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">

        <tbody>

          <tr>

            <td style="background-color: rgb(255, 255, 183);"><span style="font-family: Arial;"><span style="font-weight: bold;">Implementation and API (javadoc)</span></span></td>

          </tr>

        </tbody>
      </table>

      <div style="margin-left: 40px;"><a href="gettingstarted.shtml">Implementation</a><br>

      <a href="http://www.cis.ksu.edu/%7Erobby/courses/cis706f05/api/index.html">Javadoc
API</a></div>

      </td>

    </tr>

<!--msnavigation-->
  </tbody>
</table>

<br>

</body>
</html>
