<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>CSCE 425/825</title>


  <link rel="stylesheet" type="text/css" href="../css/style.css">

  <meta name="Microsoft Border" content="tlb, default">

</head>


<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

          <tr>

            <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
            <p align="center"><b><font face="Arial" size="5">CSCE 425/825 - Compiler
Construction</font></b></p>

            </td>

          </tr>

        </tbody>
      </table>

      <p><span style="position: absolute; top: 50px; left: 11px;"> <img src="../images/12x12spacer.gif" border="0" height="12" width="12"></span> </p>

      </td>

    </tr>

  </tbody>
</table>

<table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

<!--#include file="sidebar.shtml" --> <td valign="top" width="24"></td>

<td valign="top">
      <h1><font face="Arial" size="5">Milestone
6 : Peephole Optimization</font></h1>

<font face="Arial" size="2">
<p>Your task in this milestone is to extend 
develop and implement a collection of peephole optimization patterns
for improving generated bytecode programs.  There are an enormous
number and variety of patterns that one can identify and detect.
In years past, students have found as many as 60 patterns that
provided code improvements.
</p>
<p> 
This extra-credit assignment will focus on <em>detecting</em>
patterns and printing replacement bytecode sequences.  You
will not actually be rewriting the bytecode program.
</p>
<p>
To achieve this you will use the ASM Tree representation - you can 
find the source for ASM including the Tree representation 
<a href="asm.zip">here</a>.  Unfortunately, there is little in
the way of documentation.
</p>
The <a href="milestone-6-skeleton.zip">skeletal milestone solution</a>
provides a pattern detector that scans the bytecode stream for patterns
of the form:
<pre>
ILOAD v
ICONST_c
IADD
ISTORE v
</pre>
and prints a replacement of <code>IINC v, c</code> in class
<code>IncrementPattern</code>.   Note that this implementation
is somewhat flexible in that it also matches variants of the pattern
that have <code>BIPUSH c</code> rather than <code>ICONST_c</code>. 
</p>
<p>
You should follow the model
of this class and introduce new patterns as sub-types of
the abstract class <code>sjc.optimize.Pattern</code>.  Note
that you may wish to extend the utility functions defined in
that class to help identify and access operand values of different
byte codes.
</p> 
</p>
Your solution should be presented as an extension of the JUnit
test case <code>sjc.test.ByteCodeOptimizerTest</code>.  You should
insert <code>detect()</code> calls for each pattern you 
introduce and you should ensure that you have a sample program
that illustrates the occurrence of this pattern - analagous
to <code>src-examples/SimpleIncrement.java</code>. 
</p>
<p>
      <p>You must submit
your assignment through the course <a href="http://cse.unl.edu/~cse425/handin">Project Upload</a> site
by 11:59pm CDT on Friday Dec 16, 2005.
      </p>
</font>

      <hr>
      <h3><font face="Arial" size="4">What To Submit</font></h3>

<font face="Arial" size="2">
<p>You are to implement your solution as an extension to
the provided skeleton.
</p>
<p>Your solution should consist of the following :</p>

      <ul>
<li>working versions of the pattern detectors you develop
integrated into the provided skeletal project</li>

<li>a collection of test cases that illustrate your pattern
detectors and unit tests integrated into <code>ByteCodeOptimizerTest</code>
that trigger the compilation and pattern detection on those
examples</li>

<li>thorough external documentation that details for each pattern 
the sequence of bytecode detected, the replacement, and gives a 
justification for why the replacement preserves the semantics
of the original program and how the replacement <em>reduces</em>
a measure of size for the program - so that we can argue about
termination of an iterative peephole optimizer</li>

      </ul>
</p>
<p>
Upload your Milestone 6 project in a single .zip file; be sure to include the
top level directory in the zip archive (e.g., use <code>zip -r "archive-name" "milestone-6"</code>).
</p>
</font>

      <hr>
      <h3><font face="Arial" size="4">Grading</font></h3>
<font face="Arial" size="2">
<p>
You may receive up to 10 points for up to five different pattern detectors.
A maximum of 50 extra credit points is possible for this assignment.
</p>
<p>
You will only receive points for a working detector, that shows
a demonstrable improvement in code illustrated on bytecode
generated by the SJC compiler, and that has a convincing written
justification for it's correctness.  This means that <em>no partial
extra credit will be given</em>. 
</p>
<p>
5 points will be awarded for the basic pattern detector and additional
2 points for each variation on that pattern that is implemented.  For
example, the <code>IncrementPattern</code> illustrates a basic 
<code>IINC</code> replacement pattern with a variant for <code>BIPUSH</code>.
This would be worth 7 points.   If these patterns were modified to
detect variants of the form
<pre>
ICONST_c
ILOAD v
IADD
ISTORE v
</pre>
that would yield a total of four variants - the <code>ILOAD</code>
first or second and the <code>ICONST</code> or <code>BIPUSH</code>.
This would only yield a total of 10 extra credit points, rather than
11, due to the limit of 10 points per pattern.
</p>
<p>
The idea here is to encourage you to think about variations on
your patterns, but also to think about some different patterns.
</p>
</font>


      </td>

    </tr>

  </tbody>
</table>

<br>

<br>

</body>
</html>
