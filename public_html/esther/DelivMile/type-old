<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>CSCE 425/825</title>


  <link rel="stylesheet" type="text/css" href="../css/style.css">

  <meta name="Microsoft Border" content="tlb, default">

</head>


<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

          <tr>

            <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
            <p align="center"><b><font face="Arial" size="5">CSCE 425/825 - Compiler
Construction</font></b></p>

            </td>

          </tr>

        </tbody>
      </table>

      <p><span style="position: absolute; top: 50px; left: 11px;"> <img src="../images/12x12spacer.gif" border="0" height="12" width="12"></span> </p>

      </td>

    </tr>

  </tbody>
</table>

<table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

<!--#include file="sidebar.shtml" --> <td valign="top" width="24"></td>

<td valign="top">
      <h1><font face="Arial" size="5">Milestone
3 : Type Checking</font></h1>

<font face="Arial" size="2">
      <p>Your
task in this milestone is to extend the StaticJava type checker
to support ExtendedStaticJava
programs. The differences between StaticJava and ExtendedStaticJava
are highlighted in the <a href="../extendedstaticjava.shtml">EBNF
for ExtendedStaticJava</a>.
Most of the work in this
milestone requires you to override the TypeChecker/ASTVisitor visit
methods in ExtendedTypeChecker.java to implement the new type rules
for ESJ.
</p>

      <p>You must submit
your assignment through the course <a href="http://cse.unl.edu/~cse425/handin">Project Upload</a> site
by 11:59pm CDT on Thursday Nov 3, 2005.
      </p>
</font>

      <hr>
      <h3><font face="Arial" size="4">Hints</font></h3>
<ul>
<li> As with previous milestones, you may need to configure the build path
     of the supplied skeletal project to allow things to build correctly.</li>

<li> It is a useful design strategy to write down a type rule for each new 
     construct in ESJ before implementing it.  Use the type rules from<br>
     lecture as a guide.  Then you can map your rule to an implementation
     following the model of the StaticJava type checker.</li>

<li> Try to reuse as much of the StaticJava type checker as possible.  You
     will definitely need to make some changes and perhaps add new visit<br>
     methods, but there is much that can be reused and there is lots to
     learn from studying that code.</li>

<li> An extended symbol processing pass is supplied for your use.  It is
     similar to what was covered in class except that in addition to the<br>
     name and method maps there is now a <code>fieldTypeMap</code> (in 
     class <code>ClassType</code>).</li>    

<li> You will need to convert between JDT AST types and SJ/ESJ's type representation.
     Use the ExtendedTypeChecker.Visitor.convertType method to do this.</li>
</ul>

      <hr>
      <h3><font face="Arial" size="4">What To
Submit</font></h3>

<font face="Arial" size="2">
      <p>You are to implement your solution as an extension of 
         the <a href="milestone-3.zip"> Milestone 3 skeletal project</a>.  You will need to<br> 
         integrate you AST constuction pass with
         this project; just drop your esj-ast.g file into the appropriate
         directory.</p>
<p>
BUG FIX: on line 134 of file ExtendedSymbolTableBuilder.java change
the following line:<br>
<pre>node.getIntializer().accept(this);</pre>
to be:<br>
<pre>if (node.getInitializer() != null) node.getIntializer().accept(this);</pre>
<p>A standard JUnit test case is provided in
ExtendedTypeCheckerTest.java that produces a textual dump of<br>
the types calculated for each expression node in the input program.
It is this output that will be compared to the results of the
reference compiler.<br>
You should use the name of the Class to denote the type of a
reference, a type name immediately followed by "[]" to
denote an array type, and for null you can simply print "null"
as its type.<br>

      <p>Your solution should consist of the following :</p>

      <ul>

        <li>a modified version of ExtendedTypeChecker.java that correctly
type checks ExtendedStaticJava</li>

        <li>at least 5 failing ExtendedStaticJava programs that exhibit
type errors, but not syntax or symbol definition/use errors.  The<br>
idea is that you should develop test cases that pass through all of
the phases that precede type checking, but which fail in type checking.<br>
Try to cover the different kinds of type checking errors that your compiler
is able to catch.  
Place these in the src-examples<br> 
directory of the project structure.</li>

        <li>a succesful ExtendedStaticJava program that exercises all
of the syntax extensions in ESJ. Place these in the src-examples<br> 
directory of the project structure.</li>

        <li>an updated version of the ExtendedASTParserTest.java file, located
under the src-esjc-test directory of the project structure,
that runs the passing and failing examples. </li>

      </ul>
</p>
Upload the updated Milestone 3 project in a single .zip file; be sure to include the
top level directory in the zip archive (e.g., use <code>zip -r "archive-name" "milestone-3"</code>).
As with all programming, I expect that you provide reasonable
internal documentation describing<br> 
tricky/subtle parts of your
implementation.  If you have any limitations in your implementation<br>
you should include documentation describing those as well, since if
we find them we will assume that you did not.
</p>
<p>
Recall that your project will be graded in large part by subjecting
it to a large number of tests.
It is in your<br> best interest to do a good job of testing.  
</font>

      </td>

    </tr>

  </tbody>
</table>

<br>

<br>

</body>
</html>
