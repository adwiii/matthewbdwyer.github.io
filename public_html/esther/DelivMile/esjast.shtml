<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>CSCE 425/825</title>


  <link rel="stylesheet" type="text/css" href="../css/style.css">

  <meta name="Microsoft Border" content="tlb, default">

</head>


<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

          <tr>

            <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
            <p align="center"><b><font face="Arial" size="5">CSCE 425/825 - Compiler
Construction</font></b></p>

            </td>

          </tr>

        </tbody>
      </table>

      <p><span style="position: absolute; top: 50px; left: 11px;"> <img src="../images/12x12spacer.gif" border="0" height="12" width="12"></span> </p>

      </td>

    </tr>

  </tbody>
</table>

<table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

<!--#include file="sidebar.shtml" --> <td valign="top" width="24"></td>

<td valign="top">
      <h1><font face="Arial" size="5">Milestone
2 : Abstract Syntax Trees using JDT</font></h1>

<font face="Arial" size="2">
      <p>Your
task in this milestone is to extend the StaticJava ANTLR parser,
the file <code>StaticJavaAST.g</code>,
provided in the course SVN
repository, to support ExtendedStaticJava
programs. The differences between StaticJava and ExtendedStaticJava
are highlighted in the <a href="../extendedstaticjava.shtml">EBNF
for ExtendedStaticJava</a>.</p>

      <p>You must submit
your assignment through the course <a href="http://cse.unl.edu/~cse425/handin">Project Upload</a> site
by 11:59pm CDT on Friday October 19, 2007.
Solutions submitted after the deadline will have their score reduced
by 10% for each hour that they are late; late times will be rounded up
to the next highest hour for this calculation.
      </p>
</font>

      <hr>
      <h3><font face="Arial" size="4">Setup</font></h3>

<font face="Arial" size="2">
      <p>
      Download the file <a href="myname-milestone2.zip">myname-milestone2.zip</a>
      <p>
      This contains a skeletal implementation of the first milestone with a JUnit testing framework for your use. 
      <p>
In order to import the projects into your workspace, do the following:
<p>
Goto the "File" menu, select "Import". Expand "General" and select "Existing Projects into Workspace". Click "Next". Select "Select archive file:" and click the "Browse" button associated with it. In the file browser, points to the milestone2.zip that you downloaded.
<p>
You should see "myname-milestone-scanning-parsing" and "compiler-sjc" ("compiler-sjc" is only available if you don't already have the project in your workspace). Check both (or just the milestone and click "Finish".
<p>
If you run Eclipse appropriately (i.e., using Java 5.0 and the right versions of plugins and by following the instructions in the course quick notes website), your workspace should be set. 
<p>
Make sure you rename "myname" in the project's name into your CIS username by right clicking the project, select "Refactor" -> "Rename...".
<p>    
</font>

      <hr>
      <h3><font face="Arial" size="4">Instructions and Hints</font></h3>

<font face="Arial" size="2">
      <p>Your assignment is to implement the JDT construction actions
 required for ESJ.  You will do this by adding to the file:<br>
<pre>sjc.parser.extended.ExtendedStaticJavaAST.g</pre><br>
which contains the JDT constructing actions for the basic SJ lexer and parser.

      <p>We are also providing the file:<br>
<pre>sjc.parser.extended.ExtendedStaticJava.g</pre><br>
which contains a solution to milestone 1 that passes all of the
test cases for that milestone.  You can use that to see how to
handle any features in ESJ that you did not completely handle in
your solution for milestone 1.

      <p>You can tell if you are making progress by running the JUnit test
         suite.   This is done by highlighting the class:<br>
<pre>sjc.test.extended.ExtendedParserTest</pre>
(which is located in the <code>src-esjc-test</code> project), right
clicking and selecting "Run As" -> "JUnit Test".  The results will
be shown in total and on a per test case basis.
      
      <p>You can see the source of the test cases in <code>src-examples</code>
         directory of the milestone.  For this milestone, the unit testing 
         is done by differencing the output produced by running JDT code
         printing routines with output produced by our solution.  Those
         files are stored with a <code>.ast</code> suffix). 
      
      <p>You are done when all of the test cases pass or your run out of time.



      <p>As with milestone 1, a systematic approach to considering the features
         of ESJ will be helpful.  To get you started, in the following we 
         describe the extensions to the StaticJava syntax defined in ESJ and 
         comment on some details that are relevant for understanding how to 
         construct the AST for those extensions.</p>
<pre>
// allows simple class declarations before and after main class declaration
&#60program&#62 ::= &#60simple-class-declaration&#62*
                  &#60class-declaration&#62
                  &#60simple-class-declaration&#62*

// simple declaration can have zero or more public field declaration
// (i.e., no methods)
&#60simple-class-declaration&#62 ::= "class" ID "{" &#60public-field-declaration&#62* "}"

// public field declaration has one field modifier: public followed by
// the field's type and name
&#60public-field-declaration&#62 ::= "public" &#60type&#62 ID ";"

// SJ type is not renamed as basic-type, and ESJ type can be basic-type,
// class type, or an array type (of basic-type or class type)
&#60type&#62 ::= ( &#60basic-type&#62 | ID ) ( "[" "]" )?

// add do-while, for, and increment/decrement statements
&#60statement&#62 ::= &#60assign-statement&#62 | &#60if-statement&#62 | &#60while-statement&#62
                  | &#60invoke-exp-statement&#62 | &#60return-statement&#62
                  | &#60for-statement&#62 | &#60do-while-statement&#62 | &#60inc-dec-statement&#62

// allow general lhs instead of SJ's identifier as an assignment's
// left hand side
&#60assign&#62 ::= &#60lhs&#62 "=" &#60exp&#62

// lhs can be variable reference (identifier), a field access, or
// an array access, respectively
&#60lhs&#62 ::= ID | &#60exp&#62 "." ID | &#60exp&#62 "[" &#60exp&#62 "]"

// for statement: note that as in Java for-inits, loop condition, and
// for-updates are optional
&#60for-statement&#62 ::= "for" "(" &#60for-inits&#62? ";" &#60exp&#62? ";" &#60for-updates&#62? ")"                        
                              "{" &#60statement&#62* "}"

// for inits is a comma separated assignments; note that variable declaration is
// not allowed here
&#60for-inits&#62 ::= &#60assign&#62 ( "," &#60assign&#62 )*

// for updates is a comma separated increments/decrements
&#60for-updates&#62 ::= &#60inc-dec&#62 ( "," &#60inc-dec&#62 )*

// postfix increment/decrement
&#60inc-dec&#62 ::= &#60lhs&#62 "++" | &#60lhs&#62 "--"

// do while statement
&#60do-while-statement&#62 ::= "do" "{" &#60statement&#62* "}" "while" "(" &#60exp&#62 ")" ";"
// inc/dec statement
&#60inc-dec-statement&#62 ::= &#60inc-dec&#62 ";"

// add new expression, array access expression, field access expression, and
// conditional expression
&#60exp&#62 ::= &#60literal-exp&#62 | &#60unary-exp&#62 | &#60binary-exp&#62 | &#60paren-exp&#62
            | &#60invoke-exp&#62 | &#60var-ref&#62 | &#60new-exp&#62 | &#60array-access-exp&#62
            | &#60field-access-exp&#62 | &#60cond-exp&#62

// add null literal
&#60literal-exp&#62 ::= &#60boolean-literal&#62 | NUM | "null"

// add bit-complement operator ("~")
&#60unary-exp&#62 ::= &#60unary-op&#62 &#60exp&#62

// add bit-complement operator ("~")
&#60unary-op&#62 ::= "+" | "-" | "!" | "~"

// add shift operators ("&#60&#60" | "&#62&#62" | "&#62&#62&#62"), note that you need to enforce
// correct operator precedence (similar to Java's)
&#60binary-exp&#62 ::= &#60exp&#62 &#60binary-op&#62 &#60exp&#62

// add shift operators ("&#60&#60" | "&#62&#62" | "&#62&#62&#62"), note that you need to enforce
// correct operator precedence (similar to Java's)
&#60binary-op&#62 ::= "+" | "-" | "*" | "/" | "%" | "&#62" | "&#62=" | "==" | "&#60"
                  | "&#60=" | "!=" | "&&" | "||" | "&#60&#60" | "&#62&#62" | "&#62&#62&#62"

// add conditional operator
&#60cond-exp&#62 ::= &#60exp&#62 "?" &#60exp&#62 ":" &#60exp&#62

// add simple class instance creation, new array creation with a specified
// length, and new array creation with given array elements, respectively
&#60new-exp&#62 ::= "new" ID "(" ")"
                | "new" &#60type&#62 "[" &#60exp&#62 "]"
                | "new" &#60type&#62 "[" "]" &#60array-init&#62

// array init is a comma separated expressions in curly braces
&#60array-init&#62 ::= "{" &#60exp&#62 ( "," &#60exp&#62 )* "}"

// field access
&#60field-access-exp&#62 ::= &#60exp&#62 "." ID

// array access
&#60array-access-exp&#62 ::= &#60exp&#62 "[" &#60exp&#62 "]"
</pre>

<p>Note that there are many different ways that you could structure your
ESJ parser and your approach may differ from the illustrated above.  As in
Milestone 1, the EBNF and comments above are meant to be illustrative.</p>

<p>Remember to use the AST view tool to see what "example" JDT looks like.
</font>

      <hr>
      <h3><font face="Arial" size="4">What To
Submit</font></h3>

<font face="Arial" size="2">
      <p>Your solution should consist of the following :</p>

      <ul>
        <li>a modified version of ExtendedStaticJavaAST.g that handles ExtendedStaticJava</li>

        <li>a single text file that describe your implementation including any limitations and anything special you had to do to handle the extensions</li>

      </ul>
</p>
Export your solution project as an archive file named 
<code>yourname-milestone2.zip</code>.  You should test your archive
file to ensure that you can load it into your workspace and execute
the JUnit test driver; when doing this take care not to overwrite your
solution.
<p>
As with all programming, I expect that you provide reasonable
internal documentation describing
tricky/subtle parts of your
implementation.  If you have any limitations in your implementation
you should include documentation describing those as well, since if
we find them we will assume that you did not.
</p>
<p>
Your grade will be based on your solution (90%), your in code
documentation (5%), and the description file you provide (5%).
<p>
If you admit to failing a test then you will lose only half of
the points associated with that test in comparison to our finding
out you fail the test when we run your solution.

</font>

      </td>

    </tr>

  </tbody>
</table>

</body>
</html>
