<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>CSCE 425/825</title>


  <link rel="stylesheet" type="text/css" href="../css/style.css">

  <meta name="Microsoft Border" content="tlb, default">

</head>


<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

          <tr>

            <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
            <p align="center"><b><font face="Arial" size="5">CSCE 425/825 - Compiler
Construction</font></b></p>

            </td>

          </tr>

        </tbody>
      </table>

      <p><span style="position: absolute; top: 50px; left: 11px;"> <img src="../images/12x12spacer.gif" border="0" height="12" width="12"></span> </p>

      </td>

    </tr>

  </tbody>
</table>

<table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

<!--#include file="sidebar.shtml" --> <td valign="top" width="24"></td>

<td valign="top">
      <h1><font face="Arial" size="5">Milestone
5 : Code Generation</font></h1>

<font face="Arial" size="2">
      <p>
Your task in this milestone is to extend the StaticJava code generator
to support ExtendedStaticJava
programs. The differences between StaticJava and ExtendedStaticJava
are highlighted in the <a href="../extendedstaticjava.shtml">EBNF
for ExtendedStaticJava</a>.
Most of the work in this
milestone requires you to override and extend
the ByteCodeGenerator.Visitor visit
methods in a file ExtendedByteCodeGenerator.java to implement code
generation for the ESJ constructs.
      <p>
For extra credit, you may implement a selection of different
optimizations.  These can be improvements to the code generation
strategies that exist in the SJ ByteCodeGenerator.  They can
also be implemented as transformations of the AST.  For example,
you could implement a visitor that transforms expressions in
the AST to, e.g., perform arithmetic on operators with constant
operands at compile time, to simplify arithmetic expressions
based on identities or other algebraic properties.  
Note that these simplifications can "cascade" through a program
yielding additional opportunities for optimization.
You can receive up to 25 additional points for completing this extra
credit.  Credit will be assigned in 5 point increments for each
distinct optimization that is described, implemented and
demonstrated via test cases.
</p>


      <p>You must submit
your assignment through the course <a href="http://cse.unl.edu/~cse425/handin">Project Upload</a> site
by 11:59pm CDT on Friday Nov. 30, 2007.
      </p>
</font>

      <hr>
      <h3><font face="Arial" size="4">Setup</font></h3>

<font face="Arial" size="2">
      <p>
      Download the file <a href="myname-milestone5.zip">myname-milestone5.zip</a>
      <p>
      This contains a skeletal implementation of the milestone with a JUnit testing framework for your use. 
      <p>
In order to import the projects into your workspace, do the following:
<p>
Goto the "File" menu, select "Import". Expand "General" and select "Existing Projects into Workspace". Click "Next". Select "Select archive file:" and click the "Browse" button associated with it. In the file browser, points to the milestone2.zip that you downloaded.
<p>
You should see "myname-milestone5", check the box,
and click "Finish".
<p>
If you run Eclipse appropriately (i.e., using Java 5.0 and the right versions of plugins and by following the instructions in the course quick notes website), your workspace should be set. 
<p>
Make sure you rename "myname" in the project's name into your CIS username by right clicking the project, select "Refactor" -> "Rename...".
<p>    
</font>

      <hr>
      <h3><font face="Arial" size="4">Instructions and Hints</font></h3>

<font face="Arial" size="2">
      <p>Your assignment is to implement the bytecode generator
for ESJ.  You will do this by adding to the file:<br>
<pre>sjc.codegen.extended.ExtendedByteCodeGenerator</pre><br>
to implement the byte code generation for the ESJ constructs;
similar to previous phases you will use the existing SJ 
<pre>ByteCodeGenerator</pre> implementation as a basis for
your implementation.

      <p>The milestone skeleton contains a completely working version
of the ESJ compiler up through type checking.

      <p>You can tell if you are making progress by running the JUnit test
         suite.   This is done by highlighting the class:<br>
<pre>sjc.test.extended.ExtendedByteCodeGeneratorTest</pre>,
right clicking and selecting "Run As" -> "JUnit Test".  The results will
be shown in total and on a per test case basis.
      
      <p>You can see the source of the test cases in <code>src-examples</code>
         directory of the milestone.  For this milestone, the unit testing 
         is done by actually executing the generated code from your compiler.
         Some of the tests include assertion statements that test the results
         calculated by your generated code.
      
      <p>You are done when all of the test cases pass or your run out of time.

<p> It is a useful design strategy to write down a code generation template
    for each new
     construct in ESJ before implementing it.  Use the templates from
     lecture as a guide.  Then you can map your rule to an implementation
     following the model of the StaticJava code generator.

<p> <b>IMPORTANT</b>: Try to reuse as much of the StaticJava code
generator as possible.  You
     will definitely need to make some changes and perhaps add new visit
     methods, but there is much that can be reused and there is lots to
     learn from studying that code.

<p> Remember that ASM and the ASMifier are great resouces.
If you are in doubt as to how to generate byte codes for a program fragment,
     use the ASM viewer to show the byte codes generated by the Java compiler in
     Eclipse.   Even better you can toggle the bytecode view to use the 
ASMifier to show you the sequence of ASM API calls to generate the given bytecodes. 

      
</font>

      <hr>
      <h3><font face="Arial" size="4">What To
Submit</font></h3>

<font face="Arial" size="2">
      <p>Your solution should consist of the following :</p>

      <ul>

        <li>a modified version of ExtendedByteCodeGenerator.java that correctly generates bytecodes for ExtendedStaticJava</li>

        <li>a description of all of the new code generation templates
you implemented to handle the ESJ features.  These should be integrated into the header comments for each code generation method in the visitor that you create.  
Note that while these are comments, I expect them to be precise.</li>

        <li>a single text file that describe your implementation including any limitations and anything special you had to do to handle the extensions</li>

        <li>for extra credit, you must all of the code that you modify or
implement.  You must also provide documentation of the optimizations you
implement and provide at least two test cases for each optimization
that illustrate how that optimization works.

      </ul>
</p>
Export your solution project as a single file named <em>yourname</em>-milestone5.zip,
including the text files in the root directory of your project, and upload that file.
<p>
As with all programming, I expect that you provide reasonable
internal documentation describing tricky/subtle parts of your
implementation.  If you have any limitations in your implementation
If you have any limitations in your implementation
you should include documentation describing those as well, since if
we find them we will assume that you did not.
</p>
<p>
Your grade will be based on your solution (80%), your in code
generation template documentation (15%), and the description of 
limitations you provide (5%).
<p>
If you admit to failing a test then you will lose only half of
the points associated with that test in comparison to our finding
out you fail the test when we run your solution.

</font>

      </td>

    </tr>

  </tbody>
</table>

<br>

<br>

</body>
</html>
