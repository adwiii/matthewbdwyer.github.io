<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>CSCE 425/825</title>


  <link rel="stylesheet" type="text/css" href="../css/style.css">

  <meta name="Microsoft Border" content="tlb, default">

</head>


<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

          <tr>

            <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
            <p align="center"><b><font face="Arial" size="5">CSCE 425/825 - Compiler
Construction</font></b></p>

            </td>

          </tr>

        </tbody>
      </table>

      <p><span style="position: absolute; top: 50px; left: 11px;"> <img src="../images/12x12spacer.gif" border="0" height="12" width="12"></span> </p>

      </td>

    </tr>

  </tbody>
</table>

<table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

<!--#include file="sidebar.shtml" --> <td valign="top" width="24"></td>

<!--msnavigation--><td valign="top">
      <h1><font face="Arial" size="5">Milestone
1 : Scanning and Parsing</font></h1>

<font face="Arial" size="2">
      <p>Your
task in this milestone is to extend the StaticJava ANTLR specification,
provided in the course SVN repository, to support<br>

ExtendedStaticJava
programs. The differences between StaticJava and ExtendedStaticJava
are highlighted in the <a href="../extendedstaticjava.shtml">EBNF
for ExtendedStaticJava</a>.</p>

      <p>You must submit
your assignment through the course <a href="http://cse.unl.edu/~cse425/handin">Project Upload</a> site
by 11:59pm CDT on Friday September 28, 2007.
      </p>
</font>


      <hr>
      <h3><font face="Arial" size="4">Setup</font></h3>

<font face="Arial" size="2">
      <p>
      Download the file <a href="myname-milestone1.zip">myname-milestone1.zip</a> 
      <p>
      This contains a skeletal implementation of the first milestone
      with a JUnit testing framework for your use. 
      <p>
In order to import the projects into your workspace, do the following:
<p>
Goto the "File" menu, select "Import". Expand "General" and select "Existing Projects into Workspace". Click "Next". Select "Select archive file:" and click the "Browse" button associated with it. In the file browser, points to the milestone1.zip that you downloaded.
<p>
You should see "myname-milestone1" and "compiler-sjc" ("compiler-sjc" is only available if you don't already have the project in your workspace). Check both (or just the milestone) and click "Finish".
<p>
If you run Eclipse appropriately (i.e., using Java 5.0 and the right versions of plugins and by following the instructions in the course quick notes website), your workspace should be set. 
<p>
Make sure you rename "myname" in the project's name into your CSE user id by right clicking the project, select "Refactor" -> "Rename...".
<p>    
</font>

      <hr>
      <h3><font face="Arial" size="4">Instructions and Hints</font></h3>

<font face="Arial" size="2">
      <p>Your assignment is to implement the language extensions required
         for ESJ.  You will do this by adding to the file
<code>ExtendedStaticJava.g</code>,
in directory <code>myname-milestone1/src/sjc/parser/extended</code>,
which contains the rules for the basic SJ lexer and parser; 
ANTLR has no inheritence mechanism for parser rules so we've
just copied the SJ rules here for you.</p>

      <p>You will need to systematically  look at each difference in
         the ESJ and SJ language descriptions and decide how to change
         the ANTLR rules.</p>
 
      <p>You can tell if you are making progress by running the JUnit test
         suite.   This is done by highlighting the class
<code>sjc.test.extended.ExtendedParserTest</code>
(which is located in the <code>src-esjc-test</code> project), right
clicking and selecting "Run As" -> "JUnit Test".  The results will
be shown in total and on a per test case basis.</p>  

      <p>You can see the source of the test cases in <code>src-examples</code>
         directory of the milestone.</p>

      <p>Note that currently the
test suite only includes "passing" test cases.   Part of your job will be to
extend the JUnit test driver with the ability to support "failing" test cases, i.e.,
inputs for which the expected behavior is that a parse error is detected, and to
write some test programs that demonstrate your parser can catch errors.</p>  

      <p>You are done when all of the test cases pass (note that a test program that has
a parse error in it "passes" when the parser detects the error).</p>

      <p>Note that you are not expected to modify the <code>ExtendedParserTestGenerator.java</code>
program.  You can simply modify <code>ExtendedParserTest.java</code> directly.  If you would like to 
modify the generator then by all means do so.</p>

      <p>In some cases, it is easier to define a "weaker" grammar rather than
trying to enforce the precise constraints in your language
and catching violations of those constraints in latter
phases of your compiler. Problematic constraints often arise when
one wants to enforce a ordering on the occurrence
of parts of the program input where those parts may be separated by
arbitrary syntax. A classic example of this is the
constraint that one can only reference variables that have
been previously defined.  
</p>

<p>With ANTLR v3 a good strategy is to start
with the most direct encoding of the EBNF as you can and let the
power of LL(*) and backtracking work for you.  Only restructure
the grammar when you really need to.
</p>

</font>

      <hr>
      <h3><font face="Arial" size="4">What To
Submit</font></h3>

<font face="Arial" size="2">
      <p>Your solution should consist of the following :</p>

      <ul>

        <li>a modified version of ExtendedStaticJava.g that handles ExtendedStaticJava</li>

        <li>a modified version of ExtendedParserTest.java to handle failing tests</li>

        <li>10 ESJ programs with syntax errors in the "extended" portions of the language, i.e., don't insert
            errors that the SJ parser could catch by itself</li>

        <li>a single text file that describe your implementation including any limitations and anything special you had to do to handle the extensions</li>


      </ul>
</p>
Upload these files in a single .zip file named <code>yourcseuserid-milestone1.zip</code>.  For example,
I would upload <code>dwyer-milestone1.zip</code>.
<p>
As with all programming, I expect that you provide reasonable
internal documentation describing tricky/subtle parts of your
implementation.  If you have any limitations in your implementation
you should include documentation describing those as well, since if
we find them we will assume that you did not.
</p>
<p>
Your grade will be based on your solution (80%), your failing tests (10%),
your in code documentation (5%), and the description file you provide (5%).
<p>
Honesty is the best policy.  If in your description file you admit to 
failing a test then you will lose only half of
the points associated with that test.  On the other hand if you do not admit
the failure and we detect it in our testing you will lose all of the credit
associated with that test.
</font>

      </td>

    </tr>

  </tbody>
</table>

<br>

<br>

</body>
</html>
