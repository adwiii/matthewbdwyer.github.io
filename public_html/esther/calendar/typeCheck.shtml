<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>Compiler Construction</title>


  <link rel="stylesheet" type="text/css" href="../css/style.css">

  <meta name="Microsoft Border" content="tlb, default">

</head>


<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

          <tr>

            <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
            <p align="center"><b><font face="Arial" size="5">CSCE 425/825 - Compiler
Construction</font></b></p>

            </td>

          </tr>

        </tbody>
      </table>

      <p><span style="position: absolute; top: 50px; left: 11px;">
      <img src="../images/12x12spacer.gif" border="0" height="12" width="12"></span> </p>

      </td>

    </tr>

<!--msnavigation-->
  </tbody>
</table>

<table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

<!--#include file="sidebar.shtml" -->
      <td valign="top" width="24"></td>

<!--msnavigation--><td valign="top">
      <p><b><font face="Arial" size="5">Type Checking</font></b></p>

      <h1><font face="Arial" size="2">Exercises</font></h1>

      <ol>
   <li>Give the type rules for:
    <ul>
        <li><code>for</code>-statements;
        <li><code>new</code>-expressions; and
        <li>array expressions.
    </ul></li>
  <li>Assume you have a method <code>int m(int,int)</code> and construct 
      the type proof for the program fragment:<br>
      <pre>
         int x,y; 
         y = 2; 
         x = m(3,y)+1;
      </pre>                    
      </li>
      
  <li>Consider a scenario, where we extend SJ with a 
      type <code>real</code> that also has a <code>+</code>
      operator.<br> 
      Furthermore, we want <code>int</code> values to
      be implicitly coerced into <code>real</code> values as needed.<br> 
      Explain the implications for the type checker.</li>

  <li>A radical extension of the ESJ type system would allow a variable to be         typed as:<br> 
      <pre> A,B,C x; </pre>                    
      which means that <code>x</code> may contain objects of either of the            classes <code>A</code>, <code>B</code>, or <code>C</code>.<br>
      Types are thus finite sets of classes, rather than just single classes.<br>
<br>
      With the appropriate type rules, this will allow more programs to be
      accepted as statically type correct.<br> 
      Show examples of such type rules
      for the ESJ syntax. Show that they a strictly more powerful than the
      standard type system.<br>
      Do you like this new language?</li>

   <li>Study the code for type checking SJ programs.</li>

      </ol>

      <h1><font face="Arial" size="2">Reading</font></h1>

      <ul>

        <li><font face="Arial" size="2">Dragon,
Chapter 6.1-6.5</font></li>

      </ul>

      <p><font face="Arial" size="2"><b>Materials</b></font></p>

      <p><font face="Arial" size="2">
      <a href="resources/09-type-checking.pdf">Type Checking</a><br>

      </font></p>


      <font face="Arial" size="2"><br>
      </font>
      </td>

    </tr>

  </tbody>
</table>

<br>
</body>
</html>
