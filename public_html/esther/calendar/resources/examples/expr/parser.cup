// JavaCup specification for a simple expression evaluator (w/ actions)
package expr;

import java.lang.System;
import java.io.*;
import java_cup.runtime.*;
import expr.scanner;

// Definition of scanner within the parser and constructor
parser code {:
  scanner theScanner;

  // Need to create a scanner for this parser to use
  public parser(InputStream input) { 
    super();
    theScanner = new scanner(input);
  }
:};

// Preliminaries to set up and use the scanner.  
scan with {: return theScanner.nextToken(); :};

// Terminals (tokens returned by the scanner). 
terminal           tPLUS, tMINUS, tTIMES, tDIVIDE;
terminal           tLPAREN, tRPAREN;
terminal Integer   tINTCONST;

// Non terminals and types of RESULT values computed in their actions
non terminal           program;
non terminal Integer    expr;

// Precedence rules
precedence left tPLUS, tMINUS;
precedence left tTIMES, tDIVIDE;
precedence left tLPAREN;

// The grammar 
program ::= expr:e 
	      {: System.out.println("result is " + e); :} 
	      ;

expr    ::= expr:e1 tPLUS expr:e2    
	      {: RESULT = new Integer(e1.intValue() + e2.intValue()); :} 
          | expr:e1 tMINUS expr:e2    
              {: RESULT = new Integer(e1.intValue() - e2.intValue()); :} 
	  | expr:e1 tTIMES expr:e2 
	      {: RESULT = new Integer(e1.intValue() * e2.intValue()); :} 
	  | expr:e1 tDIVIDE expr:e2 
	      {: RESULT = new Integer(e1.intValue() / e2.intValue()); :} 
          | tINTCONST:n                 
	      {: RESULT = n; :}
	  | tLPAREN expr:e tRPAREN     
	      {: RESULT = e; :} 
            ;
