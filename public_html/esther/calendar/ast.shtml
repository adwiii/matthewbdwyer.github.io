<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>Compiler Construction</title>


  <link rel="stylesheet" type="text/css" href="../css/style.css">

  <meta name="Microsoft Border" content="tlb, default">

</head>


<body>

<table border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

        <tbody>

          <tr>

            <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
            <p align="center"><b><font face="Arial" size="5">CSCE 425/825 - Compiler
Construction</font></b></p>

            </td>

          </tr>

        </tbody>
      </table>

      <p><span style="position: absolute; top: 50px; left: 11px;">
      <img src="../images/12x12spacer.gif" border="0" height="12" width="12"></span> </p>

      </td>

    </tr>

<!--msnavigation-->
  </tbody>
</table>

<table dir="ltr" border="0" cellpadding="0" cellspacing="0" width="100%">

  <tbody>

    <tr>

<!--#include file="sidebar.shtml" -->
      <td valign="top" width="24"></td>

<!--msnavigation--><td valign="top">
      <p><b><font face="Arial" size="5">Abstract Syntax Trees</font></b></p>

      <h1><font face="Arial" size="2">Exercises</font></h1>

      <font face="Arial" size="2">
      </font>
      These exercises are all related to the expression examples we've been
      looking at in class and in the Examples listed below.
      <ol>

<li><font size="2"><font face="Arial">Extend the expressions with a
  modulo operator </font><code><font face="Fixedsys">%</font></code><font face="Arial">
  and an </font><code><font face="Fixedsys">abs(_)</font></code><font face="Arial">
  function.</font></font></li>

  <li><font size="2" face="Arial">Write a better pretty printer that only
  outputs the minimal number of parentheses required<br>
  to preserve the semantics of the expression.</font></li>

  <li><font size="2"><font face="Arial">Introduce a unary minus operator </font>
  <code><font face="Arial">-x</font></code><font face="Arial"> as syntactic
  sugar for the expression </font><code><font face="Arial">0-x</font></code><font face="Arial">. <br>
  This means that unary minus is defined in the grammar, but not in the syntax
  trees.</font></font></li>

  <li><font size="2" face="Arial">Implement a function that simplifies the
  constant parts of a tiny expression. Include<br>
  algebraic rules on expressions involving identifiers, 
  if you feel up to it.</font></li>
      </ol>

      <h1><font face="Arial" size="2">Reading</font></h1>

      <ul>

        <li><font face="Arial" size="2">JDT documentation (see Eclipse Help)</font></li>

        <li><font face="Arial" size="2">Dragon, Chapter 5.1-5.3 - note that the specifics of attribute-grammars notations will not be used in the course.</font></li>
        <li><font face="Arial" size="2">Dragon, Chapter 5.4-5.5 - provides a deeper explanation of how actions are incorporated into the parse </font></li>

      </ul>

      <p><font face="Arial" size="2"><b>Materials</b></font></p>

      <p><font face="Arial" size="2">
      <a href="resources/07-ast.pdf">ASTs and the JDT</a><br>

      </font></p>

      <h1><font face="Arial" size="2"><font face="Arial" size="2"><b>Examples</b></font></font></h1>
In the compiler SVN repository, the <em>compiler-examples</em> project ...
<p>
<em>src-antlr</em> contains the <em>antlr.astexample</em> directory which includes
the <em>ASTOperator.g</em> and <em>ASTRewrite.g</em> files that make
use ANTLR's builtin support for tree construction and transformation.
It also has, in <em>antlr.example4</em>, the grammar <em>Example4.g</em> which
defines semantic actions to evaluate a given input expression.
<p>
<em>src-jdt</em> contains some fragments of code that illustrate how
to use the JDT.   The <em>CollectXTest.java</em> program is a unit test
driver to exercise the <em>CollectInt.java</em> and <em>ColelctName.java</em>
functionality.
<p>
A third interesting example is not loaded into SVN yet; it is
accessible <a href="resources/explicitast.zip">here</a>.  You should
unzip this archive into your workspace and it will create the
directory <em>antlr.explicitast</em>.  This contains an example that
explicitly constructs a non-ANTLR representation of a simple expression
AST.   It is instructive to study as you are getting started.
<p>
Use these as starting points to explore ANTLR's support for syntax
directed translation and semantic actions.  You should feel free
to modify and experiment with them.

      <font face="Arial" size="2"><br>
      </font>
      </td>

    </tr>

  </tbody>
</table>

<br>
</body>
</html>
