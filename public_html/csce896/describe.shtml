<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>

  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">

  <meta name="ProgId" content="FrontPage.Editor.Document">

  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">


  <title>Advanced Compilers</title>
  <link rel="stylesheet" type="text/css" href="css/style.css">

  <meta name="Microsoft Border" content="tlb">
</head>


<body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
  <tbody>
    <tr>
      <td>
      <table id="AutoNumber3" style="border-collapse: collapse;" bgcolor="#ffffff" border="1" bordercolor="#0066ff" cellpadding="0" cellspacing="0" width="100%">

  <tbody>
          <tr>

    <td bordercolor="#0066FF" bordercolorlight="#0066FF" bordercolordark="#0066FF" bgcolor="#b3b3ff" width="100%">
    
            <p align="center"><b><font face="Arial" size="5">CSCE 496/896 - Advanced Compilers</font></b></p>
            </td>

  </tr>

  
        </tbody>
      </table>


      <p><span style="position: absolute; top: 50px; left: 11px;">

      <img src="images/12x12spacer.gif" border="0" height="12" width="12"></span> </p>


      </td>
    </tr>
  </tbody>
</table>
<table border="0" cellpadding="0" cellspacing="0" dir="ltr" width="100%">
  <tbody>
    <tr>
<!--#include file="sidebar.shtml" -->

      <td valign="top" width="24"></td>
<td valign="top">
      <h1><font face="Arial" size="5">Course Description - CSCE 496/896</font></h1>

      <h2>Purpose</h2>
This course covers techniques
program representation, analysis and transformation for modern programming
languages.  Unlike CSCE 425/825, we will not consider front-end issues nor
will we consider code-generation issues.  
The goal of the course is to give students a working knowledge of the 
principles, data structures, and algorithms that are used to represent
and statically analyze the behavior of programs.  Students will be exposed to both
classic results and emerging research results.

      <h2>Topics Covered</h2>
      <ul>
      <li><i>Program representations:</i> control flow graphs, call graphs, SSA.

      <li><i>Flow analysis:</i> data flow frameworks, notions of sensitivity, soundness of analyses.

      <li><i>Context-sensitive analysis:</i> call-string, parameterized analyses,
context-free reachability, object-sensitivity.

      <li><i>Analyzing heap structures:</i> points-to and alias analyses, shape analysis.

      <li><i>Analyzing concurrent programs:</i> escape, race and atomicity analyses.

      <li><i>BDDs in program analyses:</i> BDDs for alias analyses, BDD frameworks for general program analyses.

      <li><i>Program analysis frameworks:</i> SOOT, Indus, GCC, Jedd, bddbddb
      </ul>

      <h2>Outcomes</h2>
By studying the course contents and engaging in the <i>practice</i> of
developing sophisticated program analyses through course projects, 
students will <i>master</i>
the topics of program representation, flow analysis, and techniques
for controlling tradeoffs between cost and precision in program analyses.
Students will also gain a significant degree of <i>familiarity</i> with 
widely used program analysis frameworks and 
applications of program analysis in software engineering.  They will
also be <i>exposed</i> to applications in program optimization.

    <h2>Reading</h2>
It is difficult to find a single reference for the material in this
course.  Consequently, reading will be drawn from several sources including
textbooks, research papers, and theses.  In many cases, these sources
are available electronically and will be linked off of the course pages.
In others cases, copies will be distributed in class.   
<p>
The following books provide very different perspectives on the topic
of the course.  We will be covering material from the first in some detail,
but you may find it useful to peruse the second depending on your interests
and the progression of your project.  Neither of these is required, because I
can't bring myself to ask you to pay lots of money for these unless you are
really going to work in this area - if you are then buy both.
<ol>
<li> <i>Principles of Program Analysis</i>, Nielson, Nielson and Hankin, Springer-Verlag, 1999. <i>Covers the four main approaches for encoding a static analysis - explains each approach on a simple language and focuses on correctness of analysis</i>.
<li> <i>Advanced Compiler Design and Implementation</i>, Muchnick, Morgan Kaufmann, 1998. <i>Covers all of the parts of a modern optimizing compiler - relative to PPA this is
much more practically oriented, treating more complex language features, and considering the integration of analysis into a real compiler framework.</i>
</ol>
<p>
We are very fortunate to be studying scalable precise program analysis
at a time when several excellent PhD theses are being finalized.  We
will spend a significant amount of time on two theses:
<ol>
<li> <i>Program Analysis Using Binary Decision Diagrams</i>, Lhotak, McGill University, January, 2006.
<li> <i>Detecting Synchronization Defects in Multi-Threaded Object-Oriented Programs</i>, von Praun, ETH Zurich, June, 2004.
</ol>
These theses are simultanously <i>gentler</i> and <i>more complete</i>
explanations of work that has appeared in multiple conference and
journal papers over the last several years.  They also serve as 
excellent models for a PhD thesis - so take notes. 
<p>
Our goal with these readings is to understand techniques <i>deeply</i>
rather than have a broad, but shallow, overview of all of the work
done in the area.  In any case, a great deal of breadth is provided
in the related work of these theses.
<p>

      <h2>Schedule</h2>

      <i>Lectures:</i> 2.5 hours/week. MWF 9:30-10:20, Avery 112<br>
      <i>Office Hours:</i> Instructor: TuTh 9:00-10:00pm, 365 Avery

      <h2>Prerequisites</h2>
      CIS 425/825 or equivalent

      <h2>Marking Scheme</h2>
<i>Course Projects (70%)</i>: A 2-3 person semester long project involving significant design, development and evaluation of a static program analysis.<br>
<i>Paper Presentation (10%)</i>: Each student will be responsible for giving a polished 25 minute presentation of material related to a research paper.<br>
<i>Research Summary Writing (10%)</i>: Groups of 2-3 students will team up during the course of the semester to synthesize the content of the research papers we read
in a specific area along with the content of our course discussions and write 
a summary paper of that area; areas will correspond to the list of Topics Covered
given above.<br>
<i>Participation (10%)</i>: Students will be assessed in terms of their contribution
to class discussions.  It is expected that everyone will come to class prepared
and be engaged in discussions.<br>

      <h2>Lecturer</h2>
      Matthew Dwyer, Avery 365

      <h2>Credits</h2>
      3 credits

      <h2>Philosophy</h2>
This course is intended to take individuals who have succesfully completed
an introductory compiler course that exposed them to program analysis issues
and enable them to perform read, understand, apply and extend emerging
research results in program analysis.  This will be accomplished through
a mix of lectures, reading and discussion of research papers, writing
of research summaries, and developing sophisticated program analyses and
applications over the course of the semester.  This course will function
as a kind of hybrid between a traditional lecture-oriented course and
a pure research seminar.

      </td>
    </tr>
  </tbody>
</table>


</body>
</html>
